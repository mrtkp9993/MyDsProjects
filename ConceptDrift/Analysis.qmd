---
title: "Model Drift"
date: 09/04/2022
author: Murat Koptur
keywords: data science, statistics, machine learning, concept drift, model drift
description-meta: "How to detect whether your data changed or not."
execute:
  freeze: auto
  echo: false
  warning: false
  error: false
format: 
   html:
     df-print: paged
listing: true
editor: 
  markdown: 
    wrap: 72
---

# Introduction

Model drift is a huge problem for machine learning models in production.
Model drift reveals itself as a significant increase in error rates for
models. To reduce risk, it is essential to track model performance and
detect concept drift.

Assume that, given a set of features $X$ and a target variable $y$, we
are trying to predict the target variable. Then, model drift can occur
as following:

-   If $P(y|X)$ conditional distribution changes over time, this is
    called concept drift;
-   if $P(y)$ distribution changes over time, this is called label
    drift;
-   if $P(X)$ distribution changes over time, this is called data drift.

We've said that "changes over time", this change can occur at different
shapes:

1.  Sudden drift: Change occurs in a short period of time.
2.  Gradual drift: Change occurs gradually.
3.  Incremental drift: Change occurs incrementally.
4.  Reoccurring drifts: Some time after a change occurs, the old
    distribution comes again.

![](images/paste-FB2D446A.png)

# Methods for detecting model drift

## Kolmogorov-Smirnov (KS) Test & Chi-squared Test

These sets used for compare two statistical distributions. We can apply these
tests to compare distributions of training data and post-training data.

## Population Stability Index (PSI)

PSI is a measure for determining how much a population shifted over time.

## Drift Detection Method / Early Drift Detection Method

> Drift Detection Method (DDM) uses a binomial distribution to describe the 
behavior of a random variable that gives the number of classification errors.
If the distribution of the samples is stationary, probability of 
misclassification will decrease as sample size increases. If the error rate of 
the learning algorithm increases significantly, it suggests changes in the 
distribution of classes, and thus providing the signal to update 
the model $^5$.

> Early Drift Detection Method (EDDM) is a modification of DDM and improves the
detection in presence of gradual concept drift $^5$.

## Page-Hinkley method

> This change detection method works by computing the observed values and their 
mean up to the current moment $^6$.

## ADWIN 

> ADWIN (ADaptive WINdowing) is a popular drift detection method with mathematical 
guarantees. ADWIN efficiently keeps a variable-length window of recent items; 
such that it holds that there has no been change in the data distribution. 
This window is further divided into two sub-windows $(W_0, W_1)$ used to 
determine if a change has happened. ADWIN compares the average of $W_0$ and 
$W_1$ to confirm that they correspond to the same distribution. Concept drift is 
detected if the distribution equality no longer holds. Upon detecting a drift, 
$W_0$ is replaced by $W_1$ and a new $W_0$ is initialized. ADWIN uses a 
significance value $\delta\in(0,1)$ to determine if the two sub-windows 
correspond to the same distribution $^8$.

# Examples

Let's generate example data:

* Sudden drift:

  ```{python}
  #| include: FALSE
  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import plotly.express as px
  import plotly.io as pio
  
  np.random.seed(1234)
  ```
  
  ```{python}
  #| echo: true
  n=2000
  mu1=3
  sigma1=2
  mu2=8
  sigma2=1
  
  data_sudden = np.random.rand(n) * sigma1 + mu1
  data_sudden[1000:] = np.random.randn(1000) * sigma2 + mu2
  
  label = ['Old'] * 2000
  label[1000:] = ['New'] * 1000
  
  px.line(data_sudden, title='Sudden Drift', color=label)
  ```
  
* Gradual drift:

  ```{python}
  #| echo: true
  n=2000
  mu1=3
  sigma1=2
  mu2=8
  sigma2=1
  
  data_gradual = np.random.rand(n) * sigma1 + mu1
  data_gradual[1000:1500] = np.random.choice([mu1, mu2], size=500) + np.random.randn(500)
  data_gradual[1500:] = np.random.randn(500) * sigma2 + mu2
  
  label = ['Old'] * 2000
  label[1000:1500] = ['Switching btw. old & new'] * 500
  label[1500:] = ['New'] * 500
  
  px.line(data_gradual, title='Gradual Drift', color=label)
  ```
  
* Incremental drift:

  ```{python}
  #| echo: true
  n=2000
  mu1=3
  sigma1=2
  mu2=8
  sigma2=1
  
  data_incremental = np.random.rand(n) * sigma1 + mu1
  data_incremental[1000:1500] = np.linspace(4, 8, 500) + np.random.randn(500)
  data_incremental[1500:] = np.random.randn(500) * sigma2 + mu2
  
  label = ['Old'] * 2000
  label[1000:1500] = ['Transition'] * 500
  label[1500:] = ['New'] * 500
  
  px.line(data_incremental, title='Incremental Drift', color=label)
  ```
  
* Reoccurring drift:

  ```{python}
  #| echo: true
  n=2000
  mu1=3
  sigma1=2
  mu2=8
  sigma2=1
  
  data_reoccurring = np.random.rand(n) * sigma1 + mu1
  data_reoccurring[1000:1500] = np.random.randn(500) * sigma2 + mu2
  data_reoccurring[1500:] = np.random.rand(500) * sigma1 + mu1
  
  label = ['Old'] * 2000
  label[1000:1500] = ['New'] * 500
  label[1500:] = ['Old '] * 500
  
  px.line(data_reoccurring, title='Reoccurring Drift', color=label)
  ```

Let's apply ADWIN method to each series:

* Sudden drift

  ```{python}
  #| echo: true
  from skmultiflow.drift_detection.adwin import ADWIN
  
  adwin = ADWIN()
  for i in range(2000):
      adwin.add_element(data_sudden[i])
      if adwin.detected_change():
          print('Change detected in data: ' + str(data_sudden[i]) + ' - at index: ' + str(i))
  ```

  Sudden drift was first detected at index 1023, so the method lagged 23 
  observations.
  
* Gradual drift

  ```{python}
  #| echo: true
  adwin = ADWIN()
  for i in range(2000):
      adwin.add_element(data_gradual[i])
      if adwin.detected_change():
          print('Change detected in data: ' + str(data_gradual[i]) + ' - at index: ' + str(i))
  ```

  Gradual drift was first detected at index 1087, so the method lagged 87 
  observations. After the index 1500, the method gave 3 misalerts.
  
* Incremental drift

  ```{python}
  #| echo: true
  adwin = ADWIN()
  for i in range(2000):
      adwin.add_element(data_incremental[i])
      if adwin.detected_change():
          print('Change detected in data: ' + str(data_incremental[i]) + ' - at index: ' + str(i))
  ```

  Incremental drift was first detected at index 1151, so the method lagged 151 
  observations. After the index 1500, the method gave 4 misalerts.
  
* Reoccurring drift

  ```{python}
  #| echo: true
  adwin = ADWIN()
  for i in range(2000):
      adwin.add_element(data_reoccurring[i])
      if adwin.detected_change():
          print('Change detected in data: ' + str(data_reoccurring[i]) + ' - at index: ' + str(i))
  ```
As seen from the results, sudden changes can be detected early but it can be a 
challenge that detect gradual and incremental drifts.

## Solutions to model drift

1. Discard the old data and retrain the model blindly without detecting any 
concept drift periodically. 
2. Weight the all data inversly propotional to the age of data, then train 
the model.
3. Use online (incremental) learning. As the new data arrives, retrain the
existing model.

Full source code:
<https://github.com/mrtkp9993/MyDsProjects/tree/main/ConceptDrift>

# References

$^1$  <https://pkghosh.wordpress.com/2020/12/24/concept-drift-detection-techniques-with-python-implementation-for-supervised-machine-learning-models/>

$^2$  <https://datatron.com/what-is-model-drift/#:~:text=Concept%20drift%20is%20a%20type,s)%20change(s).>

$^3$  <https://deepchecks.com/how-to-detect-concept-drift-with-machine-learning-monitoring/>

$^4$  <https://www.analyticsvidhya.com/blog/2021/10/mlops-and-the-importance-of-data-drift-detection/>

$^5$  <https://www.revistaespacios.com/a17v38n39/a17v38n39p16.pdf>

$^6$  <https://scikit-multiflow.readthedocs.io/en/stable/api/generated/skmultiflow.drift_detection.PageHinkley.html>

$^7$  <https://scikit-multiflow.readthedocs.io/en/stable/api/generated/skmultiflow.drift_detection.ADWIN.html#skmultiflow.drift_detection.ADWIN>

$^8$  <https://riverml.xyz/dev/api/drift/ADWIN/>
